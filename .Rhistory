devtools::install_github("alfcrisci/rBiometeo")
library(rBiometeo)
dir
library(rBiometeo)
sunposition(Sys.time(),43,11)
sunposition(Sys.time()+300,43,11)
?UTCI
UTCI(15,50,2,15)
utci_class(15,50,2,15)
UTCI(15,50,2,15)
?sto_shade_class
detach("package:rBiometeo", unload=TRUE)
remove.packages("rBiometeo", lib="~/R/x86_64-pc-linux-gnu-library/3.4")
devtools::install_github("alfcrisci/rBiometeo")
library(rBiometeo)
UTCI(15,50,2,15)
library(rBiometeo)
getDOY(Sys.time())
getDOY=function(date) {
return(format(as.Date(date),"%J"))
}
getDOY(Sys.Date())
format(Sys.Date(),"%j")
format(Sys.Date(),"%J")
detach("package:rBiometeo", unload=TRUE)
remove.packages("rBiometeo", lib="~/R/x86_64-pc-linux-gnu-library/3.4")
devtools::install_github("alfcrisci/rBiometeo")
temprad(25,50, 400, 200, 11, albedo = 0.3)
rBiometeo::temprad(25,50, 400, 200, 11, albedo = 0.3)
temprad_model=function(uswrf_sfc,dswrf_sfc,r_diff,ulwrf_sfc,dlwrf_sfc,proj)
{
//  ulwrf_sfc     LONG Up from surface
//  dlwrf_sfc     LONG Down from atmosphere
//  uswrf_sfc     SHORT reflected from surface
//  rdiff         SHORT diffuse
//  uswrf_sfc     SHORT from above
sigr = 17636684.30; // Reverse Stefan Boltzmann constant.
fa = 0.5;           // un-shadowed plain is assumed with solid angles  fa of the surface and the sky
ep = 0.97;          // absorptance (dimensionless) of the body surface (clothing and skin).
effsw = 0.7;        // Effective SW
efflw = 1.0;        // Effective LW
corr = 0.75;        // Correction for high reflection
fs = effsw/ep;
fl = efflw;
return(sigr*(fl*(fa*ulwrf_sfc +fa*dlwrf_sfc)+fs*(fa*corr*uswrf_sfc+proj*(uswrf_sfc)))**0.25)-273.16)
}
diffuse_model=function(csdsf_sfc,dswrf_sfc){ ifelse(csdsf_sfc>0,csdsf_sfc-dswrf_sfc,0)}
albedo_model=function(dswrf_sfc,uswrf_sfc){
albedo=dswrf_sfc/uswrf_sfc;
return(ifelse(albedo < 0.0,0, ifelse(albedo> 1,1,albedo)))
}
temprad_model=function(uswrf_sfc,dswrf_sfc,csdsf_sfc,ulwrf_sfc,dlwrf_sfc,sunelev)
{
#  ulwrf_sfc     LONG Up from surface
#  dlwrf_sfc     LONG Down from atmosphere
#  uswrf_sfc     SHORT reflected from surface
#  rdiff         SHORT diffuse
#  uswrf_sfc     SHORT from above
rdiff=diffuse_model(csdsf_sfc,dswrf_sfc)
proj=projman(sunelev)
sigr = 17636684.30; # Reverse Stefan Boltzmann constant.
fa = 0.5;           # un-shadowed plain is assumed with solid angles  fa of the surface and the sky
ep = 0.97;          # absorptance (dimensionless) of the body surface (clothing and skin).
effsw = 0.7;        # Effective SW
efflw = 1.0;        # Effective LW
corr = 0.75;        # Correction for high reflection
fs = effsw/ep;
fl = efflw;
return((sigr*(fl*(fa*ulwrf_sfc +fa*dlwrf_sfc)+fs*(fa*corr*uswrf_sfc+proj*(uswrf_sfc)))**0.25-273.16))
}
source('~/Scrivania/lav_meteosalute/meteosalute_op.r')
a=rep(1200,4)
a
a=rep(800,4)
a=rep(1200,4)
b=rep(800,4)
rdiffuse <- function(radteoric, rshort) {
kg = rshort/radteoric;
kd = (0.365 - 0.25 * kg) * sin(pi * kg);
rdiffuse = ifelse(kd * radteoric > 0 , kd * radteoric,0);
rdiffuse = ifelse(rdiffuse > rshort, rshort,rdiffuse);
return(rdiffuse)
}
rdiffuse(a,b)
b=rep(300,4)
rdiffuse(a,b)
remove.packages("rBiometeo", lib="~/R/x86_64-pc-linux-gnu-library/3.4")
devtools::install_github("alfcrisci/rBiometeo")
library(rBiometeo)
mrt_thorsson(21,22,2)
Tglob_sphere(21,50,2,300,1013,0.05,0.5,0.8,61)
Tglob_sphere(21,50,2,300,1013,0.05,0.5,0.8,0)
Tglob_sphere(21,50,2,300,1013,0.05,0.5,0.8)
library(rBiometeo)
deficitsat(20, 50)
deficitsat(20, 80)
deficitsat(20, 20)
remove.packages("rBiometeo", lib="~/R/x86_64-pc-linux-gnu-library/3.4")
devtools::install_github("alfcrisci/rBiometeo")
library(rBiometeo)
utci(15,50,3,-22)
UTCI(15,50,3,-22)
UTCI(15,50,3,15)
UTCI(15,50,3,1)
UTCI(15,50,3,-1)
UTCI(15,50,3,-10)
mrt_globe(15,15,2,150)
detach("package:rBiometeo", unload=TRUE)
remove.packages("rBiometeo", lib="~/R/x86_64-pc-linux-gnu-library/3.4")
devtools::install_github("alfcrisci/rBiometeo")
library("rBiometeo", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
remove.packages("rBiometeo", lib="~/R/x86_64-pc-linux-gnu-library/3.4")
devtools::install_github("alfcrisci/rBiometeo")
remove.packages("rTwChannel", lib="~/R/x86_64-pc-linux-gnu-library/3.4")
devtools::install_github("alfcrisci/rBiometeo")
devtools::install_github("alfcrisci/rTwChannel")
Sys.Date()
Sys.Date()-2
paste0("/home/salute/data/output/archive/archive_txt/aree_sanitarie_d01_",Sys.Date()-1,".txt")
system(paste("Rscript /home/salute/wrf/scripts/extract_day_nc.r",ls_files[i],ls_file_sanitarie[i],aree_sanitarie_coords))
devtools::install_github("alfcrisci/rBiometeo")
library(rBiometeo)
utci_class(22,40,3,22)
utci_class(22,40,3,NA)
utci_class(NA,40,3,NA)
UTCI(NA,40,3,NA)
detach("package:rBiometeo", unload=TRUE)
remove.packages("rBiometeo", lib="~/R/x86_64-pc-linux-gnu-library/3.4")
devtools::install_github("alfcrisci/rBiometeo")
library(rBiometeo)
UTCI(NA,40,3,NA)
devtools::install_github("alfcrisci/rBiometeo")
UTCI(15,40,3,NA)
UTCI(15,40,3,15)
utci_class(15,40,3,15)
utci_class(15,40,3,NA)
utci_class(NA,40,3,NA)
ls
ls()
library("rBiometeo", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
remove.packages("rBiometeo", lib="~/R/x86_64-pc-linux-gnu-library/3.4")
devtools::install_github("alfcrisci/rBiometeo")
library(rBiometeo)
UTCI(22,50,0.5,22)
?UTCI
UTCI(22,50,1,22)
UTCI(22,50,0.2,22)
UTCI(22,50,0.5,22)
UTCI(22,50,0.4,22)
devtools::install_github("alfcrisci/rBiometeo")
UTCI(22,50,0.4,22)
devtools::install_github("rstats-db/odbc")
library(raster)
library(sp)
library(rgdal)
library(gdalUtils)
setwd("/home/alf/Scrivania/lav_aster_retrieve")
source("ASTER_aux.r")
imlist=readRDS("imlist_full.rds")
cities=unique(imlist$citta)
filedir=getwd()
sapply(cities,FUN=function(x) dir.create(x))
res=list()
for ( i in 1:length(cities)) { res[[i]]=grep(i,imlist$citta) }
imlist$name[res[[i]]]
for ( i in 1:length(cities)) { res[[i]]=grep(i,imlist$citta) }
imlist$name[res[[1]]]
res[[1]]
res=list()
for ( i in 1:length(cities)) { res[[i]]=grep(cities[i],imlist$citta) }
res
imlist$name[res[[1]]]
i=1
res[[i]]=grep(cities[i],imlist$citta);
filelist=imlist$name[res[[i]]];
filedest=paste0(cities[i],"/",filelist)
filedest
filelist=paste0(imlist$name[res[[i]]],".hdf");
filedest=paste0(cities[i],"/",filelist)
sapply(cities,FUN=function(x) dir.create(paste(x,"/","hdf"))
)
dir.create(paste0("#firenze","/","hdf")
)
sapply(cities,FUN=function(x) dir.create(paste0(x,"/","hdf")))
res=list()
for ( i in 1:length(cities)) { res[[i]]=grep(cities[i],imlist$citta);
filelist=paste0(imlist$name[res[[i]]],".hdf");
filedest=paste0(cities[i],"/hdf/",filelist)
file.copy(filelist,filedest)}
file.remove(list.files(pattern(".hdf")))
list.files(pattern(".hdf"))
file.remove(list.files(pattern=".hdf"))
setwd("/home/alf/Scrivania/lav_prin_data/firenze_hdf")
source("ASTER_aux.r")
dir8)
dir()
imlist=data.frame(citta="#firenze_prin",name=NA,date=NA,type=NA)
imlist$type=as.character(ifelse(sapply(paste0(imlist[,2],".hdf"),function(x) file.info(x)$size)>9977500,"day","night"))
imlist$date=as.vector(aster_date_hdf(imlist_files))
imlist$date=as.vector(aster_date_hdf(imlist$name))
imlist$date=aster_date_hdf(imlist$name)
imlist
name=gsub(".hdf","",list.files(pattern=".hdf"))
name
imlist=data.frame(citta="#firenze_prin",name=name,date=NA,type=NA)
imlist$type=as.character(ifelse(sapply(paste0(imlist[,2],".hdf"),function(x) file.info(x)$size)>9977500,"day","night"))
imlist
imlist$date=aster_date_hdf(imlist$name)
saveRDS(imlist,"imlist.rds")
imlist
imlist_files=paste0(imlist$name,".hdf")
for ( i in 1:length(imlist$name)) { if(!file.exists(imlist_files[i])) {retrieve_aster_hdf(imlist$name[i])}}
cities=unique(imlist$citta)
filedir=getwd()
for ( i in 1:nrow(imlist)) {
argscode=paste0(filedir," ",imlist$name[i]," ",gsub("#","",imlist$citta[i])," ",imlist$type[i])
system(paste0("Rscript aster_layer.r ",argscode))
}
dir()
require(rgdal)
require(raster)
require(gdalUtils)
require(tiff)
require(rgdal)
emis=0.95
emis=0.95
bands <- c('1', '2', '3N', '3B', '4', '5', '6', '7', '8', '9')
gain_names <- c('Band', 'High Gain', 'Normal', 'Low Gain 1', 'Low Gain 2')
ucc_vals <- matrix( c(0.676, 1.688, 2.25, 0, 0.708, 1.415, 1.89, 0, 0.423,
0.862, 1.15, 0, 0.423, 0.862, 1.15, 0, 0.1087, 0.2174,
0.2900, 0.2900, 0.0348, 0.0696, 0.0925, 0.4090, 0.0313,
0.0625, 0.0830, 0.3900, 0.0299, 0.0597, 0.0795, 0.3320,
0.0209,0.0417, 0.0556, 0.2450, 0.0159, 0.0318, 0.0424,
0.2650), nrow = 10, ncol = 4, byrow = TRUE)
ucc <- data.frame( bands, ucc_vals )
names(ucc) <- gain_names
# Remove unneccessary variables
rm(bands,gain_names,ucc_vals)
# Thome et al (B) is used, which uses spectral irradiance values from MODTRAN
# Ordered b1, b2, b3N, b4, b5...b9
irradiance <- c(1848,1549,1114,225.4,86.63,81.85,74.85,66.49,59.85)
#############################################################################################################
# Next, define functions for calculations
# Write a function to convert degrees to radians
calc_radians <- function(x) {(x * pi) / (180)}
# Write a function to calculate the Radiance from DN values
calc_radiance <- function(x){(x - 1) * ucc1}
# Write a function to calculate the TOA Reflectance from Radiance
calc_reflectance <- function(x){
(pi * x * (earth_sun_dist^2)) / (irradiance1 * sin(pi * sza / 180))
}
calc_lst=function(rbright,emis=0.92,c2micro=14388,Lwave=10.16,kelvin=F) {
temp=rbright / ( 1 + ( Lwave * (rbright / c2micro)) * log(emis))
if ( kelvin==F) { temp=temp-273.15}
return(temp)
}
calc_tbright=function(r,band=13) {
k=band-9
ucc <- c(0.006822, 0.00678, 0.00659, 0.005693, 0.005225)
k1 <- c(3024, 2460, 1909, 890, 646.4)
k2 <- c(1733, 166, 1581, 1357, 1273)
tir_rad <- ((r - 1) * ucc[k])
sat_brit <- k2[k]/log((k1[k]/tir_rad) + 1)
return(sat_brit)
}
retrieve_aster_hdf=function(file,user='alf_crisci_1',password="la_querce_69M")
{download.file(url=paste0("http://e4ftl01.cr.usgs.gov/ASTT/AST_L1T.003/",
substr(file,16,19),".",
substr(file,12,13),".",
substr(file,14,15),"/",file,'.hdf'),
destfile=paste0(file,'.hdf'),
method="wget",
extra=paste0("--http-user=",user," --http-password=",password))
}
aster_date_hdf=function(file)  {aster_date=as.Date(paste(substr(file,16,19),substr(file,12,13),substr(file,14,15),sep="-"))
return(aster_date)
}
name=AST_L1T_00302022002101839_20150421104727_79535
name="AST_L1T_00302022002101839_20150421104727_79535"
file_name <- paste0(name,".hdf")
month <- substr(file_name, 12, 13)
day <- substr(file_name, 14, 15)
year <- substr(file_name, 16, 19)
date <- paste(year, month, day, sep = '-')
doy <- as.numeric(strftime(date, format = '%j'))
#
md  <- gdalinfo(file_name)
md
sds <- get_subdatasets(file_name)
sds
match_vnir <- grep('VNIR_Swath', sds)
match_tir <- grep('TIR_Swath', sds)
match_vnir
for ( i in 1:nrow(imlist)) {
argscode=paste0(filedir," ",imlist$name[i]," ",gsub("#","",imlist$citta[i])," ",imlist$type[i])
system(paste0("Rscript aster_layer.r ",argscode))
}
library(raster)
library(sp)
library(rgdal)
library(gdalUtils)
#######################################################################################################################################
setwd("/home/alf/Scrivania/lav_prin_data/firenze_hdf")
source("ASTER_aux.r")
dir()
setwd("/home/alf/Scrivania/lav_prin_data")
list.files(path="firenze_hdf",recursive=T)
setwd("/home/alf/alf_github/matrixcorr_questio")
library(XLConnect)
library(MASS)
library(corrplot)
library(Hmisc)
library(xtable)
library(sjPlot)
wb = loadWorkbook("MATRIX Alfio_FINAL SI ESPERIENZA.xlsx")
df = readWorksheet(wb, sheet = "Foglio1")
getSheets(wb)
df = readWorksheet(wb, sheet = "Foglio2")
df
wb1 = loadWorkbook("MATRIX Alfio_FINAL tot.xlsx")
df1 = readWorksheet(wb, sheet = "Foglio1")
getSheets(wb1)
wb1 = loadWorkbook("MATRIX Alfio_FINAL tot.xlsx")
df1 = readWorksheet(wb, sheet = "TUTTI")
wb1 = loadWorkbook("MATRIX Alfio_FINAL tot.xlsx")
df1 = readWorksheet(wb1, sheet = "TUTTI")
df1
wb = loadWorkbook("MATRIX Alfio_FINAL SI ESPERIENZA.xlsx")
df_esp = readWorksheet(wb, sheet = "Foglio1")
wb1 = loadWorkbook("MATRIX Alfio_FINAL tot.xlsx")
df_final = readWorksheet(wb1, sheet = "TUTTI")
getSheets(wb)
wb = loadWorkbook("MATRIX Alfio_FINAL SI ESPERIENZA.xlsx")
df_esp = readWorksheet(wb, sheet = "Foglio2")
wb1 = loadWorkbook("MATRIX Alfio_FINAL tot.xlsx")
df_final = readWorksheet(wb1, sheet = "TUTTI")
#########################################################################################################
# x is a matrix containing the data
# method : correlation method. "pearson"" or "spearman"" is supported
# removeTriangle : remove upper or lower triangle
# results :  if "html" or "latex"
# the results will be displayed in html or latex format
corstars <-function(x, method=c("pearson", "spearman"), removeTriangle=c("upper", "lower"),
result=c("none", "html", "latex")){
#Compute correlation matrix
require(Hmisc)
x <- as.matrix(x)
correlation_matrix<-rcorr(x, type=method[1])
R <- correlation_matrix$r # Matrix of correlation coeficients
p <- correlation_matrix$P # Matrix of p-value
## Define notions for significance levels; spacing is important.
mystars <- ifelse(p < .0001, "****", ifelse(p < .001, "*** ", ifelse(p < .01, "**  ", ifelse(p < .05, "*   ", "    "))))
## trunctuate the correlation matrix to two decimal
R <- format(round(cbind(rep(-1.11, ncol(x)), R), 2))[,-1]
## build a new matrix that includes the correlations with their apropriate stars
Rnew <- matrix(paste(R, mystars, sep=""), ncol=ncol(x))
diag(Rnew) <- paste(diag(R), " ", sep="")
rownames(Rnew) <- colnames(x)
colnames(Rnew) <- paste(colnames(x), "", sep="")
## remove upper triangle of correlation matrix
if(removeTriangle[1]=="upper"){
Rnew <- as.matrix(Rnew)
Rnew[upper.tri(Rnew, diag = TRUE)] <- ""
Rnew <- as.data.frame(Rnew)
}
## remove lower triangle of correlation matrix
else if(removeTriangle[1]=="lower"){
Rnew <- as.matrix(Rnew)
Rnew[lower.tri(Rnew, diag = TRUE)] <- ""
Rnew <- as.data.frame(Rnew)
}
## remove last column and return the correlation matrix
Rnew <- cbind(Rnew[1:length(Rnew)-1])
if (result[1]=="none") return(Rnew)
else{
if(result[1]=="html") print(xtable(Rnew), type="html")
else print(xtable(Rnew), type="latex")
}
}
#########################################################################################################
corstars(df_esp,"spearman","upper","none")
str(df_esp)
corstars(df_final,"spearman","upper","none")
corstars(df_final,"spearman","upper","none")
corstars(df_final,"pearson","upper","none")
capture.output(corstars(last_mat_zab,"pearson","upper","html"), file = "matcorr_last_pearson.html")
capture.output(corstars(last_mat_zab,"spearman","upper","html"), file = "matcorr_last_spear.html")
setwd("/home/alf/Scrivania/lav_prin_data")
lst=list.files(path="firenze_hdf",pattern"LST",recursive=T)
lstfile=list.files(path="firenze_hdf",pattern="LST",recursive=T)
tbfile=list.files(path="firenze_hdf",pattern="TB",recursive=T)
lst
lstfile
tbfile=list.files(path="firenze_hdf",pattern="TB",recursive=T)
tbfile
radfile=list.files(path="firenze_hdf",pattern="radiance",recursive=T)
reflfile=list.files(path="firenze_hdf",pattern="reflectance",recursive=T)
reflfile
dir.create("firenze_aster")
wb = loadWorkbook("MATRIX Alfio_FINAL SI ESPERIENZA.xlsx")
df_esp = readWorksheet(wb, sheet = "Foglio2")
setwd("/home/alf/alf_github/matrixcorr_questio")
library(XLConnect)
library(MASS)
library(corrplot)
library(Hmisc)
library(xtable)
library(sjPlot)
wb = loadWorkbook("MATRIX Alfio_FINAL SI ESPERIENZA.xlsx")
df_esp = readWorksheet(wb, sheet = "Foglio2")
df_esp
str( df_esp)
wb = loadWorkbook("MATRIX_esp.xlsx")
df_esp=rad.csv("MATRIX_esp.csv")
df_esp=read.csv("MATRIX_esp.csv")
df_esp
str(df_esp)
wb = loadWorkbook("MATRIX_esp.xls")
df_esp = readWorksheet(wb, sheet = "MATRIX_esp")
df_esp
str(df_esp )
corstars(df_esp,"spearman","upper","none")
corstars(df_esp,"pearson","upper","none")
capture.output(corstars(df_esp,"pearson","upper","html"), file = "matcorr_esp_pearson.html")
capture.output(corstars(df_esp,"spearman","upper","html"), file = "matcorr_esp_spear.html")
lstfile_f=list.files(path="firenze_hdf",pattern="LST",recursive=T,full.names = F)
tbfile_f=list.files(path="firenze_hdf",pattern="TB",recursive=T,full.names = F)
radfile_f=list.files(path="firenze_hdf",pattern="radiance",recursive=T,full.names = F)
reflfile_f=list.files(path="firenze_hdf",pattern="reflectance",recursive=T,full.names = F)
lstfile_f
lstfile[1]
gsub("*./","puppa/", lstfile[1])
gsub("*./*./","puppa/", lstfile[1])
gsub("*./","puppa/", lstfile[1])
gsub("+./","puppa/", lstfile[1])
gsub("*.*/","puppa/", lstfile[1])
lstfile_f=gsub("*.*/","gsub("*.*/","puppa/", lstfile[1])/", lstfile)
setwd("/home/alf/alf_github/matrixcorr_questio")
corstars(df_final,"spearman","upper","none")
corstars(df_final,"pearson","upper","none")
capture.output(corstars(df_final,"pearson","upper","html"), file = "matcorr_last_pearson.html")
capture.output(corstars(df_final,"spearman","upper","html"), file = "matcorr_last_spear.html")
df_esp
df_esp$Previous.flood.experience.
df_esp$Previous.flood.experience.=NULL
df_esp
corstars(df_esp,"spearman","upper","none")
corstars(df_esp,"pearson","upper","none")
capture.output(corstars(df_esp,"pearson","upper","html"), file = "matcorr_esp_pearson.html")
capture.output(corstars(df_esp,"spearman","upper","html"), file = "matcorr_esp_spear.html")
names(df_esp)
corstars(df_final,"spearman","upper","none")
setwd("/home/alf/alf_github/matrixcorr_questio")
wb = loadWorkbook("MATRIX_esp.xls")
df_esp = readWorksheet(wb, sheet = "MATRIX_esp")
corstars(df_esp,"spearman","upper","none")
corstars(df_esp,"pearson","upper","none")
capture.output(corstars(df_esp,"pearson","upper","html"), file = "matcorr_esp_pearson.html")
capture.output(corstars(df_esp,"spearman","upper","html"), file = "matcorr_esp_spear.html")
wb1 = loadWorkbook("MATRIX FINAL.xls")
df_final = readWorksheet(wb1, sheet = "TUTTI")
df_final = readWorksheet(wb1, sheet = "MATRIX FINAL")
getSheets(wb1)
wb1 = loadWorkbook("MATRIX_FINAL.xls")
df_final = readWorksheet(wb1, sheet = "MATRIX FINAL")
getSheets(wb1)
df_final = readWorksheet(wb1, sheet = "TUTTI")
corstars(df_final,"spearman","upper","none")
corstars(df_final,"pearson","upper","none")
capture.output(corstars(df_final,"pearson","upper","html"), file = "matcorr_last_pearson.html")
capture.output(corstars(df_final,"spearman","upper","html"), file = "matcorr_last_spear.html")
lstfile_f=gsub("*.*/","firenze_aster/", lstfile)
lstfile_f
